# GitHub Actions Self-hosted Runner Deployment for Kubernetes
#
# このDeploymentはKubernetes上でGitHub Actions self-hosted runnerを実行します
# プルリクエスト作成時に.github/workflows/pr-check.ymlが自動実行され、
# この runner Pod でテスト・リント・ビルドが並列実行されます
#
# 動作フロー:
# 1. GitHub Actions ワークフローが runs-on: self-hosted でジョブを送信
# 2. このPodがジョブを受信 (LABELS: self-hosted,kubernetes でマッチング)
# 3. Node.js環境でnpm install/test/lint/build を実行
# 4. 結果をGitHub APIで返却、プルリクエストにステータス表示
#
# 前提条件: secret.yaml で GitHub Personal Access Token が設定済み
apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-actions-runner
  namespace: github-actions-runner  # namespace.yaml で作成済み
spec:
  replicas: 2  # 並列処理のため2台のrunnerを起動
  selector:
    matchLabels:
      app: github-actions-runner
  template:
    metadata:
      labels:
        app: github-actions-runner
    spec:
      containers:
      - name: runner
        # 安定した GitHub Actions runner イメージ
        image: myoung34/github-runner:latest
        env:
        # GitHub Personal Access Token (secret.yaml から取得)
        - name: ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-runner-secret
              key: GITHUB_TOKEN
        # Runner のスコープをリポジトリレベルに設定
        - name: RUNNER_SCOPE
          value: "repo"
        # 対象リポジトリのURL (secret.yaml から取得)
        - name: REPO_URL
          valueFrom:
            secretKeyRef:
              name: github-runner-secret
              key: REPO_URL
        # Runner名のプレフィックス (GitHub上では k8s-runner-xxx として表示)
        - name: RUNNER_NAME_PREFIX
          value: "k8s-runner"
        # ワークフロー内の runs-on で指定するラベル
        - name: LABELS
          value: "self-hosted,kubernetes"
        # リソース制限: CPU/メモリ使用量を制御
        resources:
          requests:
            memory: "1Gi"    # 最低保証メモリ
            cpu: "500m"      # 最低保証CPU (0.5コア)
          limits:
            memory: "2Gi"    # 最大メモリ制限
            cpu: "1000m"     # 最大CPU制限 (1コア)
        volumeMounts:
        # Docker-in-Docker用: ホストのDocker socketをマウント
        - name: docker-sock
          mountPath: /var/run/docker.sock
        # CI/CDワークスペース用の一時ディレクトリ
        - name: workspace
          mountPath: /home/runner/work
      volumes:
      # ホストのDocker socketを共有 (コンテナ内でDocker操作可能)
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
      # 各Pod毎に独立したワークスペース
      - name: workspace
        emptyDir: {}
      # rbac.yaml で定義したサービスアカウントを使用
      serviceAccountName: github-runner-service-account